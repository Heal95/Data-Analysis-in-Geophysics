Exercise - Discrete Fourier Transform
--------------------------------------
1. First find the theoretical Fourier transform for a function of choice f(t), then calculate it approximately using the discrete Fourier transform (DFT) or the fast Fourier transform (FFT). Specifically, choose T>0 large enough and sample the function f on [−T,T] with several (e.g., 5) different sampling intervals ΔT, where each subsequent interval is, for example, half as long as the previous one. For each series of samples, calculate the DFT using Matlab's fft function. Draw two figures. The first should show different samplings in a series of plots (subplot). On each plot, draw the original function dashed with sufficient resolution and overlay the samples for the corresponding sampling interval shown as points in another color. On the second figure, plot the DFTs against the corresponding frequencies for each sampling interval, one over the other, all in the same color. Mark the calculated values with points connected by a dashed line. Overlay the theoretically calculated Fourier transform in another color and with sufficient density. Repeat everything for the function f(t)cos(2πbt). To determine the Fourier transform of the new function, use the convolution theorem (with cos(2πbt)↔[δ(ω−2πb)+δ(ω+2πb)]). Choose the parameters T,a and b "with consideration". For example, T should be large enough that the function outside the interval [−T,T] has negligible values (all the functions mentioned here are square-integrable). It may not be necessary to plot the entire interval [−T,T] but only the interesting part. Sampling should range from quite coarse to sufficiently fine, etc. If it is simpler, calculations and programming can be carried out in the complex domain without separating the real and imaginary parts. Function fft_zp.m is suitable for approximately calculating the Fourier transform of a function given on an interval symmetric around the origin. Feel free to study and use it. You can compare it with Matlab's fft function.

2. There are several files named f_xx.txt, each with 6 columns. The first four columns contain the year, month, day, and hour, respectively, and the last two columns contain the NE and NW components of ocean currents measured at a station approximately 12 miles west of Veli Rat (Croatia). The number in the file name indicates the depth. The current series, besides the long-period part, also contain tidal currents and inertial oscillations.
The goal of the exercise is to calculate daily currents, i.e., series of daily values for the NE and NW components. One possibility is to directly calculate daily averages, which is the same as applying a moving average and then taking every 24th value (decimation). Another possibility is to use some other, potentially more suitable, low-pass filter instead of the moving average and then again decimate every 24 hours. The coefficients of such an odd-length filter (only the significant half!) are found in the file LP_filter.txt. Calculate the transfer function of that filter, as well as the transfer function of the 24-hour moving average, using the fast Fourier transform with zero-padding so that for an odd-length filter you get a phase equal to zero and for an even-length filter a linear phase. Plot both transfer functions over each other (real and imaginary parts, amplitude, and phase) and compare them. Mark the frequencies you find interesting with vertical lines.
Finally, for one of the provided series of ocean currents, for each component separately, do the following: Apply the provided LP filter and the 24-hour moving average (for this purpose, the function filt_fir.m is attached). Plot the original currents (each component in its own image) and overlay the currents filtered in both ways with different colors. Also, plot the difference between the currents obtained by the LP filter and the moving average. Calculate the periodogram (modulus of the fft) of the original series and the periodograms of both filtered series and plot them over each other. Then decimate the original series (i.e., take every 24th value) and each of the filtered series, calculate the periodograms of all decimated series and plot them over each other. Make sure that the frequency axes are the same (comparable) for both hourly and daily (decimated) series. 
---------------------------------------------------------------------------------------------------------------------
Files:
-----
fft_zp.m - Attached Matlab code for task 1
filt_fir.m - Attached Matlab code for task 2
f_03.txt, f_05.txt, f_07.txt, f_09.txt, f_11.txt, LP_filter.txt - Additional files for task 2
part_1.m - Matlab code for task 1
part_2.m - Matlab code for task 2
Report.pdf - Report with figures and results in croatian